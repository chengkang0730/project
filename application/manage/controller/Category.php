<?php
/**
    内容--栏目管理
 */

namespace app\manage\controller;


use controller\Backend;
use library\Tree;
use think\App;
use app\common\model\Category as categoryModel;
use app\common\validate\Category as categoryValidate;
use think\Exception;


class Category extends Backend
{

    /**
     * area模型对象
     * @var app\common\model\Category
     */
    protected $category_list;
    protected $model;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new categoryModel();
        $where = $this->build_params();
        var_dump($where);die;
        $data = $this->model
            ->alias('c')
            ->field('c.*,models.name as models_name')
            ->join('models','c.model_id = models.id')
            ->where($where)
//            ->order('c.id desc')
            ->select()
            ->toArray();
        $category_tree_obj = Tree::instance();
        $category_tree_obj->init($data);
        $this->category_list = $category_tree_obj->getTreeList($category_tree_obj->getTreeArray(0));
    }

    //栏目列表
    public function index()
    {
        if( $this->request->isAjax() ){
//            var_dump($this->category_list);die;
            return layui_table_data($this->category_list);
        }
        $model_select = model('models')->getList();
        $this->assign('model_select',$model_select);
        return $this->fetch();
    }

    //添加栏目
    public function add()
    {
        if($this->request->isAjax() && $this->request->isPost() ){
//            print_r($this->request->param());die;
            //前台表单传递的数据
            $data = $this->request->param();
            //验证数据
            $category_validate = new categoryValidate();
            $result = $category_validate->check($data);
            if($result){
                $res = $this->model->add($data);
                if($res){
                    $this->success('操作成功');
                }else{
                    $this->error('添加失败');
                }
            }else{
                return $this->error($category_validate->getError());
            }
        }
        //选择模型
        $model_select = model('models')->getList();
        $this->assign('model_select',$model_select);

        $category_select = $this->model->getCategorySelectList();
        $this->assign('category_select',$category_select);

        return $this->fetch();
    }


    //修改数据
    public function edit()
    {
        $edit_id = $this->request->param('id');
        if($this->request->isAjax() && $this->request->isPost() ){
            $param = $this->request->param();
            if($param['model_id'] < 1){
                return $this->error('模型参数错误');
            }
            $category_valitdate = new categoryValidate();
            $result =$category_valitdate->check($param);
            if($result){
                $res = $this->model->edit($param);
                if($res){
                    return $this->success('操作成功');
                }else{
                    return $this->error('修改失败');
                }
            }else{
                return $this->error($category_valitdate->getError());
            }
        }
        //修改的当前数据
        $category = $this->model->getById($edit_id);
        $this->assign('category',$category);
        //选择模型
        $model_select = model('models')->getList();
        $this->assign('model_select',$model_select);
        //父级栏目
        $category_select = $this->model->getCategorySelectList();
        $this->assign('category_select',$category_select);
        return $this->fetch();
    }


    //设置状态
    public function set_status()
    {
        $field = $this->request->param('field');
        $field_val = $this->request->param('field_val');
        $save[$field] = $field_val;
        try{
            if( $this->model->where('id','eq',$this->request->param('ids'))->update($save) ){
                return $this->success('操作成功');
            }else{
                return $this->error('操作失败');
            }
        }catch (Exception $e){
            return $this->error($e->getMessage());
        }
    }

    //删除数据
    public function del()
    {
        $ids = $this->request->param('ids');
        $ids_arr = explode(',',$ids);
        $delete_time = array(
            "delete_time"   =>  time()
        );
        if( $this->model->where('id','in',$ids_arr)->update($delete_time) ){
            return $this->success('操作成功');
        }else{
            return $this->error('操作失败');
        }
    }
}